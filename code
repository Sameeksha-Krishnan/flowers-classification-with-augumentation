import os
import matplotlib.pyplot as plt
import numpy as np
import glob
import shutil
import tensorflow as tf

from tensorflow.keras import losses
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator

import logging
logger = logging.getLogger()
logger.setLevel(logging.ERROR)

URL = "https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz"
dataset = tf.keras.utils.get_file('flower_photos.tgz', URL, extract = True, cache_dir = '.', cache_subdir = '')

dataset_dir = os.path.join(os.path.dirname(dataset), 'flower_photos')

classes = ['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']

for cl in classes:
    img_path = os.path.join(dataset_dir, cl)
    images = glob.glob(img_path + '/*.jpg')
    print('{}: {} Images'.format(cl, len(images)))
    train, val = images[:round(len(images) * 0.8)], images[round(len(images) * 0.8):]

    for t in train:
        if not os.path.exists(os.path.join(dataset_dir, 'train', cl)):
            os.makedirs(os.path.join(dataset_dir, 'train', cl))
        shutil.move(t, os.path.join(dataset_dir, 'train', cl))

    for v in val:
        if not os.path.exists(os.path.join(dataset_dir, 'val', cl)):
            os.makedirs(os.path.join(dataset_dir, 'val', cl))
        shutil.move(v, os.path.join(dataset_dir, 'val', cl))

train_dir = os.path.join(dataset_dir, 'train')
val_dir = os.path.join(dataset_dir, 'val')

BATCH = 100
IMAGE_SHAPE = 150

def plotImage(image_arr):
    fig, axes = plt.subplots(1, 5, figsize = (10, 10))
    axes = axes.flatten()
    for (img, ax) in zip(image_arr, axes):
        ax.imshow(img)
    plt.tight_layout()
    plt.show()

train_image_generator = ImageDataGenerator(rescale = 1. / 255, horizontal_flip = True, rotation_range = 45, zoom_range = 0.5, height_shift_range = 0.15, width_shift_range = 0.15)
train_data_gen = train_image_generator.flow_from_directory(batch_size = BATCH, shuffle = True, directory = train_dir, target_size = (IMAGE_SHAPE, IMAGE_SHAPE), class_mode = 'sparse')

augumented_images = [train_data_gen[0][0][0] for i in range(5)]
plotImage(augumented_images)

val_image_generator = ImageDataGenerator(rescale = 1. / 255)
val_data_gen = val_image_generator.flow_from_directory(batch_size = BATCH, shuffle = False, directory = val_dir, target_size = (IMAGE_SHAPE, IMAGE_SHAPE), class_mode = 'sparse')

model = tf.keras.models.Sequential([layers.Conv2D(16, (3, 3), padding = 'same', activation = 'relu', input_shape = (150, 150, 3)),
                                    layers.MaxPooling2D(2,2),

                                    layers.Conv2D(32, (3, 3), padding = 'same', activation = 'relu'),
                                    layers.MaxPooling2D(2,2),

                                    layers.Conv2D(64, (3, 3), padding = 'same', activation = 'relu'),
                                    layers.MaxPooling2D(2,2),

                                    layers.Flatten(),

                                    layers.Dropout(0.2),
                                    layers.Dense(512, activation = 'relu')

                                    layers.Dropout(0.2),
                                    layers.Dense(5)])

model.compile(loss = losses.SparseCategoricalCrossentropy(from_logits = True), optimizer = 'adam', metrics = ['accuracy'])

model.summary()

EPOCH = 80
history = model.fit(train_data_gen, steps_per_epoch = int(np.ceil(train_data_gen.n / float(BATCH))), epochs = EPOCH,
                    validation_data = val_data_gen, validation_steps = int(np.ceil(val_data_gen.n / float(BATCH))))

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(EPOCHS)

plt.figure(figsize = (20, 20))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label = 'Training Accuracy')
plt.plot(epochs_range, val_acc, label = 'Validation Accuracy')
plt.legend(loc = 'lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label = 'Training Loss')
plt.plot(epochs_range, val_loss, label = 'Validation Loss')
plt.legend(loc = 'upper right')
plt.title('Training and Validation Loss')
plt.savefig('./foo.png')
plt.show()
